{"remainingRequest":"/Users/zhangyingguang/Desktop/SinaProjectMerge-main/node_modules/babel-loader/lib/index.js!/Users/zhangyingguang/Desktop/SinaProjectMerge-main/node_modules/eslint-loader/index.js??ref--13-0!/Users/zhangyingguang/Desktop/SinaProjectMerge-main/src/utils/request.js","dependencies":[{"path":"/Users/zhangyingguang/Desktop/SinaProjectMerge-main/src/utils/request.js","mtime":1614160286000},{"path":"/Users/zhangyingguang/Desktop/SinaProjectMerge-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangyingguang/Desktop/SinaProjectMerge-main/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/zhangyingguang/Desktop/SinaProjectMerge-main/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCB7IE1lc3NhZ2VCb3gsIE1lc3NhZ2UgfSBmcm9tICdlbGVtZW50LXVpJzsKaW1wb3J0IHN0b3JlIGZyb20gJ0Avc3RvcmUnOwppbXBvcnQgeyBnZXRUb2tlbiB9IGZyb20gJ0AvdXRpbHMvYXV0aCc7CmltcG9ydCBKU09OYmlnIGZyb20gJ2pzb24tYmlnaW50JzsgLy8gY3JlYXRlIGFuIGF4aW9zIGluc3RhbmNlCgp2YXIgcmVxdWVzdCA9IGF4aW9zLmNyZWF0ZSh7CiAgYmFzZVVSTDogJ2h0dHA6Ly8xMC4xOTAuMS40MTo4MS9hcGkvdjEvJyAvLyDor7fmsYLnmoTln7rnoYDot6/lvoQKICAvLyAvLyDlrprkuYnlkI7nq6/ov5Tlm57nmoTljp/lp4vmlbDmja7nmoTlpITnkIYKICAvLyAvLyDlj4LmlbAgZGF0YSDlsLHmmK/lkI7nq6/ov5Tlm57nmoTljp/lp4vmlbDmja7vvIjmnKrnu4/lpITnkIbnmoQgSlNPTiDmoLzlvI/lrZfnrKbkuLLvvIkKICAvLyB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIChkYXRhKSB7CiAgLy8gICAvLyBEbyB3aGF0ZXZlciB5b3Ugd2FudCB0byB0cmFuc2Zvcm0gdGhlIGRhdGEKICAvLyAgIC8vIGNvbnNvbGUubG9nKGRhdGEpCiAgLy8KICAvLyAgIC8vIOWQjuerr+i/lOWbnueahOaVsOaNruWPr+iDveS4jeaYryBKU09OIOagvOW8j+Wtl+espuS4sgogIC8vICAgLy8g5aaC5p6c5LiN5piv55qE6K+d77yM6YKj5LmIIEpTT05iaWcucGFyc2Ug6LCD55So5bCx5Lya5oql6ZSZCiAgLy8gICAvLyDmiYDku6XmiJHku6zkvb/nlKggdHJ5LWNhdGNoIOadpeaNleiOt+W8guW4uO+8jOWkhOeQhuW8guW4uOeahOWPkeeUnwogIC8vICAgdHJ5IHsKICAvLyAgICAgLy8g5aaC5p6c6L2s5o2i5oiQ5Yqf77yM5YiZ55u05o6l5oqK57uT5p6c6L+U5ZueCiAgLy8gICAgIHJldHVybiBKU09OYmlnLnBhcnNlKGRhdGEpCiAgLy8gICB9IGNhdGNoIChlcnIpIHsKICAvLyAgICAgY29uc29sZS5sb2coJ+i9rOaNouWksei0pScsIGVycikKICAvLyAgICAgLy8g5aaC5p6c6L2s5o2i5aSx6LSl5LqG77yM5YiZ6L+b5YWl6L+Z6YeMCiAgLy8gICAgIC8vIOaIkeS7rOWcqOi/memHjOaKiuaVsOaNruWOn+WwgeS4jeWKqOeahOebtOaOpei/lOWbnue7meivt+axguS9v+eUqAogIC8vICAgICByZXR1cm4gZGF0YQogIC8vICAgfQogIC8vCiAgLy8gICAvLyBheGlvcyDpu5jorqTlnKjlhoXpg6jkvb/nlKggSlNPTi5wYXJzZSDmnaXovazmjaLlpITnkIbljp/lp4vmlbDmja4KICAvLyAgIC8vIHJldHVybiBKU09OLnBhcnNlKGRhdGEpCiAgLy8gfV0KCn0pOyAvLyDor7fmsYLmi6bmiKrlmagKCnJlcXVlc3QuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKCAvLyDku7vkvZXmiYDmnInor7fmsYLkvJrnu4/ov4fov5nph4wKLy8gY29uZmlnIOaYr+W9k+WJjeivt+axguebuOWFs+eahOmFjee9ruS/oeaBr+WvueixoQovLyBjb25maWcg5piv5Y+v5Lul5L+u5pS555qECmZ1bmN0aW9uIChjb25maWcpIHsKICB2YXIgdXNlciA9IEpTT04ucGFyc2Uod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyJykpOyAvLyDlpoLmnpzmnInnmbvlvZXnlKjmiLfkv6Hmga/vvIzliJnnu5/kuIDorr7nva4gdG9rZW4KCiAgaWYgKHVzZXIpIHsKICAgIGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSAiQmVhcmVyICIuY29uY2F0KHVzZXIudG9rZW4pOwogIH0KCiAgY29uZmlnLmhlYWRlcnMudG9rZW4gPSAnQyNrOG5AN3Uwemw1VlhRIU9laUskeElEbDU1QURyNjFMaG9VeFJIUyc7IC8vIOeEtuWQjuaIkeS7rOWwseWPr+S7peWcqOWFgeiuuOivt+axguWHuuWOu+S5i+WJjeWumuWItue7n+S4gOS4muWKoeWKn+iDveWkhOeQhgogIC8vIOS+i+Wmgu+8mue7n+S4gOeahOiuvue9riB0b2tlbgogIC8vIOW9k+i/memHjCByZXR1cm4gY29uZmlnIOS5i+WQjuivt+axguWcqOS8muecn+ato+eahOWPkeWHuuWOuwoKICByZXR1cm4gY29uZmlnOwp9LCAvLyDor7fmsYLlpLHotKXvvIzkvJrnu4/ov4fov5nph4wKZnVuY3Rpb24gKGVycm9yKSB7CiAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTsKfSk7CmV4cG9ydCBkZWZhdWx0IHJlcXVlc3Q7"},{"version":3,"sources":["/Users/zhangyingguang/Desktop/SinaProjectMerge-main/src/utils/request.js"],"names":["axios","MessageBox","Message","store","getToken","JSONbig","request","create","baseURL","interceptors","use","config","user","JSON","parse","window","localStorage","getItem","headers","Authorization","token","error","Promise","reject"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,YAApC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,OAAP,MAAoB,aAApB,C,CAGA;;AACA,IAAMC,OAAO,GAAGN,KAAK,CAACO,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAE,+BADkB,CACe;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAxB2B,CAAb,CAAhB,C,CA2BA;;AACAF,OAAO,CAACG,YAAR,CAAqBH,OAArB,CAA6BI,GAA7B,EACE;AACA;AACA;AACA,UAAUC,MAAV,EAAkB;AAChB,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAX,CAAb,CADgB,CAGhB;;AACA,MAAIL,IAAJ,EAAU;AACRD,IAAAA,MAAM,CAACO,OAAP,CAAeC,aAAf,oBAAyCP,IAAI,CAACQ,KAA9C;AACD;;AACDT,EAAAA,MAAM,CAACO,OAAP,CAAeE,KAAf,GAAuB,0CAAvB,CAPgB,CAQhB;AACA;AAEA;;AACA,SAAOT,MAAP;AACD,CAjBH,EAkBE;AACA,UAAUU,KAAV,EAAiB;AACf,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CArBH;AAwBA,eAAef,OAAf","sourcesContent":["import axios from 'axios'\nimport { MessageBox, Message } from 'element-ui'\nimport store from '@/store'\nimport { getToken } from '@/utils/auth'\nimport JSONbig from 'json-bigint'\n\n\n// create an axios instance\nconst request = axios.create({\n  baseURL: 'http://10.190.1.41:81/api/v1/', // 请求的基础路径\n\n  // // 定义后端返回的原始数据的处理\n  // // 参数 data 就是后端返回的原始数据（未经处理的 JSON 格式字符串）\n  // transformResponse: [function (data) {\n  //   // Do whatever you want to transform the data\n  //   // console.log(data)\n  //\n  //   // 后端返回的数据可能不是 JSON 格式字符串\n  //   // 如果不是的话，那么 JSONbig.parse 调用就会报错\n  //   // 所以我们使用 try-catch 来捕获异常，处理异常的发生\n  //   try {\n  //     // 如果转换成功，则直接把结果返回\n  //     return JSONbig.parse(data)\n  //   } catch (err) {\n  //     console.log('转换失败', err)\n  //     // 如果转换失败了，则进入这里\n  //     // 我们在这里把数据原封不动的直接返回给请求使用\n  //     return data\n  //   }\n  //\n  //   // axios 默认在内部使用 JSON.parse 来转换处理原始数据\n  //   // return JSON.parse(data)\n  // }]\n})\n\n// 请求拦截器\nrequest.interceptors.request.use(\n  // 任何所有请求会经过这里\n  // config 是当前请求相关的配置信息对象\n  // config 是可以修改的\n  function (config) {\n    const user = JSON.parse(window.localStorage.getItem('user'))\n\n    // 如果有登录用户信息，则统一设置 token\n    if (user) {\n      config.headers.Authorization = `Bearer ${user.token}`\n    }\n    config.headers.token = 'C#k8n@7u0zl5VXQ!OeiK$xIDl55ADr61LhoUxRHS'\n    // 然后我们就可以在允许请求出去之前定制统一业务功能处理\n    // 例如：统一的设置 token\n\n    // 当这里 return config 之后请求在会真正的发出去\n    return config\n  },\n  // 请求失败，会经过这里\n  function (error) {\n    return Promise.reject(error)\n  }\n)\n\nexport default request\n"]}]}